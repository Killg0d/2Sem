//Program to implement Stack
//tarun
//230970005
//2-2-24

#include<iostream>
using namespace std;
const int MAX=50;
class Stack
{
        int top;
        char stack[MAX];
        public:
        Stack()
        {
                top=-1;
        }
        char peek();
        bool isFull();
        bool isEmpty();
        char pop();
        void push(char);
};
char Stack::peek()
{
        if(isEmpty())
                return -1;
        return stack[top];
}
bool Stack::isFull()
{
        return top==MAX;
}
bool Stack::isEmpty()
{
        return top==-1;
}
char Stack::pop()
{
        if(isEmpty())
        {
                cout<<"\nUnderflow";
                return 1;
        }
        else
        {
                return stack[top--];
        }
}
void Stack::push(char n)
{
        if(isFull())
        {
                cout<<"\nOverflow";
                return;
        }
        else
        {
                stack[++top]=n;
        }
}
int precedence(char c)
{
        switch(c)
        {
                case ')':
                case '(':return 4;
                case '^':return 1;
                case '*':
                case '/':
                case '%':return 2;
                case '+':
                case '-':return 3;
        }
}
int main()
{
        Stack s;
        char ch[50];
        cout<<"Enter expr:";
                                          
        cin>>ch;

        int length=0;

        for(;ch[length]!='\0';length++);

        ch[length]=')';//add closer to infix

        char p[length];

        ch[length+1]='\0';

        s.push('(');//add operner to stack

        int k=0;

        for(int i=0;ch[i]!='\0';i++)
        {
                switch(ch[i])
                {
                        case '(':
                                s.push(ch[i]);
                                break;
                        case '^':
                        case '*':
                        case '/':
                        case '+':
                        case '-':
                        case '%':
                                while(precedence(s.peek())<=precedence(ch[i])&&(!s.isEmpty()))//check precedence
                                {
                                        p[k++]=s.pop();
                                }
                                s.push(ch[i]);
                                break;
                        case ')':while(s.peek()!='('&&(!s.isEmpty()))//check reach of opener
                                 {
                                        p[k++]=s.pop();
                                                            
  }

                                 if(s.peek()!='(')//check invalidity
                                 {
                                        cout<<"\nInvalid expression\n";
                                        exit(0);
                                 }
                                 s.pop();//Remove left parenthesis
                                 break;
                        default:p[k++]=ch[i];
                                break;
                }
        }
        if(!s.isEmpty())
        {
                cout<<"\nInvalid exp\n";
                exit(1);
        }
        p[k]='\0';
        cout<<endl<<"Infix:"<<ch;
        cout<<endl<<"Postfix:"<<p;

        cout<<endl;
        return 0;
}     